@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@using CoreSRT.Models.ViewModels

@model BillViewModel


<!-- Bootstrap Date-Picker Plugin -->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/js/bootstrap-datepicker.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.4.1/css/bootstrap-datepicker3.css" />

<div>
    <p align="center"> <b>Generate Bill</b> </p>
</div>




<table class="table">
    <tr>
        <td> Select Customer : </td>
        <td>
            @Html.DropDownListFor(m => m.CustomerId, new SelectList(Model.Customers, "CustomerId", "Name"), "Select Customer")
            @Html.ValidationMessageFor(m => m.CustomerId, "Please select a customer!", new { @class = "text-danger" }, "")
        </td>
            <td>
            Date
            </td>
            <td>
                <div class="input-group date" data-provide="datepicker">
                    <input type="text" class="form-control" id="billDate">
                    <div class="input-group-addon">
                        <span class="glyphicon glyphicon-th"></span>
                    </div>
                </div>
            </td>
     </tr>
</table>

<table name="BillingItems" class="table" id="billingItemsTable">
    <thead>
        <tr>

            <th class="col-md-2">
                Item
            </th>
            <th class="col-md-2">
                @Html.DisplayNameFor(model => model.BillingItems.First().CGST)%
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().SGST)%
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().OriginalPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().SellingPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().TotalPrice)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().CGSTAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().SGSTAmount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BillingItems.First().PerItemPrice)
            </th>
        </tr>
    </thead>
    <tbody class="itemCollections">
        @for (int i = 0; i < Model.BillingItems.Count; i++)
        {

            @Html.Partial("BillingItemViewModel", Model.BillingItems[i]);
        }

    </tbody>
    <tfoot>
        <tr>
            <td>
                <button id="btnAdd" class="btnAdd btn btn-info btn-sm" type="button" value="Add">
                    <span class="glyphicon glyphicon-plus"></span>
                </button>
            </td>

            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tfoot>
</table>


<p class="text-center">
    <button id="btnSubmit" class="btn btn-primary btn-sm" onclick="TestFunction()">
        <span class="glyphicon glyphicon-ok"></span> Generate Bill
    </button>
</p>



<script type="text/javascript">
        $(function(){
                $('.datepicker').datepicker({
            format: 'dd/mm/yyyy',
            autoclose: true,
            todayHighlight: true,
            startDate: '-3d'
        })});

    $(document).on("click", ".btnAdd", function(){
    var index = $("table#billingItemsTable tbody tr").length + 1;

       $.ajax({
            url: 'AddItem',
    data:{index:index},
            success: function (data) {
                $('#billingItemsTable > tbody').append(data);
            },
            error: function (a, b, c) {
                console.log(a, b, c);
            }

        });
    });
 function TestFunction(){
        var table = $('table#billingItemsTable');

        var o = [];
        table.find('tr').each(function() {
        var $this = $(this);
        var $elements = $this.find('input, textarea, select')
        if ($elements.size() > 0) {
            var serialized = $elements.serialize();
            var item = $.toDictionary( serialized );
            o.push(item);
        }
        });

        //o.splice(-1,1);

        var modelJson = new Object();
        modelJson.CustomerId = parseInt($('[id*="CustomerId"]').val());
        modelJson.BillDate = new Date($('#billDate').val());
        modelJson.Items = o;

        var dataJson = JSON.stringify(modelJson);
        var tempp = JSON.stringify({"modelJson": dataJson});

        $.ajax({
             url:'Create',
             type:'POST',
             dataType: "json",
             contentType: 'application/json; charset=utf-8',
             data:  dataJson,
             success: function(data1){
                     var url = data1['RedirectURL'];
                     var print = confirm('Do you want to Print this Bill?');
                     if(print == true)
                     {
                        window.location.replace(decodeURIComponent(url));
                     }
                     else{
                         window.location.replace('/bills/index');
                     }
             },
             error: function (a, b, c) {
                alert('An error Occured! please try again..')
                console.log(a, b, c);
                window.location.replace('/bills/create');
            }
        });
    }
        (function($) {
    $.extend({
        toDictionary: function(query) {
            var parms = {};
            var items = query.split("&"); // split
            for (var i = 0; i < items.length; i++) {
                var values = items[i].split("=");
                var keys = values.shift().split(".");
                var key = decodeURIComponent(keys[keys.length -1]);
                var value = values.join("=")
                parms[key] = parseFloat(decodeURIComponent(value));
            }
            return (parms);
        }
    })
})(jQuery);


</script>